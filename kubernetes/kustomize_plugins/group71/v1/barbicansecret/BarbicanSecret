#!/usr/bin/env python3
import sys
import yaml
import openstack
from base64 import b64encode
from barbicanclient import client as barbican

class MissingConfig(Exception):
    pass

class MissingSecret(Exception):
    pass

def fetch_payloads(secrets):
    conn = openstack.connect()
    client = barbican.Client(session=conn.session)
    barbican_secrets = { secret.name : secret for secret in client.secrets.list()}

    def fetch_payload(spec):
        name = spec['name']
        try:
            return b64encode(barbican_secrets[name].payload.encode("utf-8")).decode('ascii')
        except KeyError as e:
            raise MissingSecret(spec) from e

    return [{ **spec, 'payload': fetch_payload(spec) } for spec in secrets]

def generate_secret(spec):
    return {
        'kind': 'Secret',
        'apiVersion': 'v1',
        'metadata': {
            'name': spec['name'],
            'namespace': spec.get('namespace', 'default'),
        },
        'data': {
            spec['key']: spec['payload'],
        },
        'type': spec.get('type', 'Opaque')
    }

REQUIRED_CONFIG = {'name', 'key'}
def validate_spec(spec):
    if not REQUIRED_CONFIG.issubset(spec.keys()):
        raise MissingConfig(spec)

def main(arg):
    with open(arg) as cfg_file:
        cfg = yaml.safe_load(cfg_file)

    for spec in cfg['secrets']:
        validate_spec(spec)

    payloads = fetch_payloads(cfg['secrets'])
    secrets = map(generate_secret, payloads)
    yaml.dump_all(secrets, sys.stdout, default_flow_style=False)

if __name__ == '__main__':
    try:
        main(sys.argv[1])
    except MissingSecret as e:
        print("Missing secret in Barbican:", e, file=sys.stderr)
    except MissingConfig as e:
        print("Missing configuration:", e, ", required:", REQUIRED_CONFIG, file=sys.stderr)
